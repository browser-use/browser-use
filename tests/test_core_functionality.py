import asyncio

import pytest
from langchain_openai import ChatOpenAI
from pytest_httpserver import HTTPServer

from browser_use.agent.service import Agent
from browser_use.agent.views import AgentHistoryList
from browser_use.browser import BrowserProfile, BrowserSession


class TestCoreFunctionality:
	"""Tests for core functionality of the Agent using real browser instances."""

	@pytest.fixture(scope='module')
	def event_loop(self):
		"""Create and provide an event loop for async tests."""
		loop = asyncio.get_event_loop_policy().new_event_loop()
		yield loop
		loop.close()

	@pytest.fixture(scope='module')
	def http_server(self):
		"""Create and provide a test HTTP server that serves static content."""
		server = HTTPServer(threaded=True)
		server.start()

		# Add routes for common test pages
		server.expect_request('/').respond_with_data(
			'<html><head><title>Test Home Page</title></head><body><h1>Test Home Page</h1><p>Welcome to the test site</p></body></html>',
			content_type='text/html',
		)

		server.expect_request('/page1').respond_with_data(
			'<html><head><title>Test Page 1</title></head><body><h1>Test Page 1</h1><p>This is test page 1</p><a href="/page2">Link to Page 2</a></body></html>',
			content_type='text/html',
		)

		server.expect_request('/page2').respond_with_data(
			'<html><head><title>Test Page 2</title></head><body><h1>Test Page 2</h1><p>This is test page 2</p><a href="/page1">Back to Page 1</a></body></html>',
			content_type='text/html',
		)

		server.expect_request('/dummy.pdf', method='HEAD').respond_with_data(
			b'',
			content_type='application/pdf',
			headers={
				'Content-Type': 'application/pdf',
				'Content-Length': '0',
				'Connection': 'close',
			},
		)

		server.expect_request('/dummy.pdf', method='GET').respond_with_data(
			b"%PDF-1.7\n%\xe2\xe3\xcf\xd3\n11 0 obj\n<<\n/Length1 10292\n/Filter /FlateDecode\n/Length 6522\n>>\nstream\nx\x9c\xcd9{|\x14\xd5\xd5\xe7\xde\x99\xd9\xd9g2Y\x92\xcd&\xd9dg\xd9d\x91,\x18\x12\x02\x81$M&O\xb4!\x10 `\x16\x13I\x80HP\x90@\x82\xe0\x0b\xd7Z\x14\xe2\x03\xf5SZi+h\xadb-2\xd9D\xdcD[\xa8\xf8\xa8\x08B\xb5\xb5\xad\xb5\x82\x8fVm?\x84\xfak\xb1R\xb2\xf3\x9d{w\x13\xa1\xb6~\xfd~\xbf\xfe\xf1\xcd\xcdy\xdcs\xce}\x9d{\xce\xd9\xd9,\x10\x00\xb0C\x18\x04\xd0\xe6.((\xda\xe8z&\x03%\x87\x11\xda\x97]\xdb\xab>\xec\xf9\xd5\x9f\x00\xc8$\x00S\xf3\x95\xdd+V\x1f\xbe.\xb4\x03@\x0ec\xff\x9a\x15\xab\xae\xbb\xf2\x81\x87\x9b\xa2\x00\x8e\xd3\x00\xd6k\xbb:;\x96\x9f\x10_B{w\x17\x8e\x9f\xde\x85\x02\xe7T\x8b\x07\xfb\xbb\xb0\x9f\xdb\xb5\xbaw\xe3E{D\x1c\xef~\x01\xe7\x9c\xbdj\xcd\xb2\x8e\x19\x9f\x96\xa5\x03d*\xa8\xdf\xbd\xbacc\xb7\xf4\x94\x03\xe7\xce\xc49A\xbd\xa6cu\xa7\xa7pZ\x04\xfb\xbfF\xfb\xeb\xbb\xd7\xf4\xf4\x1a\xf9\xb0\x1d\xc0\xd3\xcc\xf4\xdd\xeb:\xbb\xf3\xdel\xdc\x8f\xfd^\x00\xdbO@\x10\xb6\x90{@\x02\xb3\xb4C\x9a\x8a#\xb2\xe2T\xf89\\I\x9df\x89\xdaL\"e\x8f\x88\xa3\x058\xefi\x9c;g.h\xa0\xc2.\xe9\x8d\xd8<2U\xae \x11\r\x88a\x18\x00b@z\x96\xad\x06\xa24\x0c\x19\x08\x99\xd2\xe3\x90!\x06\xc0\r`|\x88\xf0\x11\xa3\xb1\x95\xc6GL\xcf(\xfd#\xdaG\x13\x80\xe7\x82=d%\xec\x81\xfd\xf0<9\x8d\xa3\xf6\xc2\x10\x0c\xc2\xcf \x1dj\xe1\xbbp#\xdc\x0f\xb7\x83\t\x16\xa3d+\xcc\xc7&\xa1\xfc~\x92a\x0cB\x01<\x8c\xfb|\x18\x8e\xa0\xede\xb0\t\x86\xc1E\xdc\xc6\xc7p3l\x16\xde\xc0Q\x9b\xc1\x01\xe3\xa1\n\x9a`\r\xdcEf\x1b\xeb\xa1\x15\x8e\x8b\xb7B\t\xcc\x86k\xa0\x9b\x84\x8d\x16\xe3n\xe3>\xe3Q\xf8\x01\x0c\t?3F\xc0\x06\x99\xb0\x0c\xdb\x11\xe3\x13\xe9\xd7\xc6\xdb0\x19G<\x00\x0f\xc2qr\x9f\xe5i\xf4\xc0e\x18\tC\xc2\xf7`\x1d\xec\x10\xdaDb\xac0\xce\xe2\x0e|\xb0\x01\xf7 B#\x1c!\x07h\x10g\xef\x84\x0f\x89\x9b\xdc(\xd4\xe0,\xdf7t\xe3\x05\xb4\xf2@\x1bt\xc1\x0e\x18&\xd3\xc8,\xea\x93Z\x8dF\xe3\x08\xb8p\x8d\x8d8\xeb\x83\x10\x81}\xd8\xa2\xf0cx\x8b\xd8\xa5\xd3\xc6\xa3\xc6i\xc8\x80Ip)\x9eg\x10^#\x07\x84\xd8\xc8-\xb1J\xf4\x98\x84^\x9a\x083Q\xb3\x06~\x02/\xc31\xe2'?\xa5k$\xbbT$i\xd2\xf5\xc6/ \x15\na!\xee\xf6q\x1c\xf9\x07\xf2\x19\xdd\x84\xedf\xe1%\xb1\xde\xa8\x86$\xf4\xcb\xbd\xcc\xdb\xf0\"\xbcK2I\x01\x99K\x16\xd1\x89t\r}HX\x07f\\\xb1\x10\xdbrX\x89\xfe\xfe6\xce\xfe\x0e\t\x92}\xd4N\x8f\n\xdf\x17\x9f\x14\xffn\xca\x8e\x9d0\x92\xf0F\x02\xf0\x1d\xf8\x1e\xfc\x948\xf0\xa4*\xe9!\xdf o\x92\xf7i\r]B\xbfC\xdf\x13\xee\x17\x9f\x10_\x97;\xf0\xd4W\xc0j\xb8\x0b\x9e\x84\xcf\x88\x93\xcc \xf3\xc8\xe5\xa4\x8b\xdcHn'\xf7\x92\x07\xc9\x11r\x8c|D\xabh3\xbd\x9a\x9e\x12\xba\x84\xb5\xc2\x8f\xc5jl\x0b\xc4\x1e\xf1V\xe96\xe9\x0e\xd3G\xb1\x96\xd8\x0b\xb1\x9f\xc7>3\x8a\x8c\xdb`\x1e\xc6\xc3-\xb8\xfb\x07\xe0!<\xd9\x10\x1c\x85\xdf`;\x0e\xef\x11\x89\xd8H\x126\x95\xf8\xc8Br\x03\xb6M\xe4.\xf2\x08\xd9M\x9e \x83\xb8\xca1\xf2\x1e\xf9\x98|J\xfeJ\xfeN\x01\x9b\x89fQ\x1f\x1d\x8f\xcdO\xd7\xd1\r\xf4~\xfa]z\x14\xdb1\xfa\xdf\xf4s!]\x18/\x04\x85iB\xb9\x10\x12\xd6\xe0\xaen\x17\xee\xc1\xf6\xb4\xf0\xae\x98)\x1e\x15\r\xf4s\x91\xb4]\xda)\xed\x96\x9e\x94\x9e\x97N\x9b\xec\xf27\xcc`>|\xee\xfb#\xf9#\xef\xc4 \xb6%\xb6=\x16\x89\r\x1a\xefB\x1a\xdea&z\xc1\x0b\xe5\xb8\xfb\x0elW\xe1}o\xc7\x88\xdb\x0bo\x10;\xfa.\x93\xe4\x93\n2\x1b=\xb3\x84\\E\xd6\x92\x8d\xe8\xc9o\x92\x1d\xe4\x07|\xefO\x91\xe7\xd0K\xbf\"\xa7p\xcf\x0e\xea\xe1{\xbe\x98N\xa3\xd5t.\xb6+h']K\xef\xa1\xf7\xd1A\xfa&=+\xc8\x82MH\x16\xd2\x84|a\x96\xd0&t\n\xbd\xc2u\xc2vA\x17\x0e\x0b\xbf\x13\xde\x13\xce\x08\xe7\xb0\x19\xa2U\xf4\x8a\xe3\xc5\x80\x18\x14g\x89K\xc4\xf5\xe2C\xe2\x87\xe2\x87R\xab\xf4\xaa\xf4{\x93\xd5\xb4\xdat\x9b)j\xfa\xb3<]\xae\x90\x9b\xe4yr\x9b\xbcM\xde'\xff\xc2\xdc\x8e\xd1y\x10\x9e\x86g\xce\xaf\x0c\xe4\x84p\x8bP'<\rw\xd3\xa9b\x06}\x8d\xbe\x86\xf1\xbc\x04\x96\x0b\x8d\x14#\x95\xee&[\xe8Md\x90\xe6J\x1bMe\xb4\x8c\xcc\x81\xd3b\x00}\xfd\x12\xddI\xcf\xd02\xa1\x914\x90\x05p\x15-\x8c\xcffJ\x15\x7f\x88\xa4\\<\x08'\xc5\xe7\xf0l\xaf\xe1\xcc\x1bMv\xb2\x89\x9e2\xd9!B\x80\xce\xc45_\x14\xa6\x88A\xe1UxK8Nd\xf1a\xf8\xadh%\xe9\xe4$}\\h\xc2(\xf8\xb1X!\xb5\x80O\xf8.<%\xac%7\xc1\xd3\xb4\x0e\xab\xef\xdf\xcdwb\x1c\xcf!?\xc4\xba\xd0L\x8a\xc8\xdf\x04\x03\x04:\x07\xa3\xa8Dx\x1fn\x85\xab\xe9\xaf\xe1$\xe6\xf1\x16\xf8\x16Y.\xae\x80\xbba*\xb9\x11>\x84\xc70+&J\xd7\x98\xf2Mi\xe4\x15\xbaR\xec\xa3\xe3\xc8 P\xf1\t<\xddL\x92K\x04)\x15\xbeI\xda\x84\x1d\xa6S\xf47\xb0\x1e\x8e\x8aVxG\xf8\x11\xee\xfe(}Jh\x14OK\xf3I\x17f\xc0Mp\x1b\xac5n\x81\xeb\xa4\x16\xf1u\xb2\x02\x04\xb2\x08\xf2\xc4\x13X\xddn\x14\x8aD\x1f\xd2\x9b\xb1\xaa\xb4bM\xdb\x87\xd9=\x8cu\xa0JhD\x89\x1b#g6\xc6\xc5B\xac\x10;\xb0}\x1b\xeb\x84\x88\x11\xb4\x12s\xfc2\xacb\xaf\xc1\xa0\xa9\x99Fa\x85\x94D\xb0\xea`=~56\x1f\x16\x1b\x8f\xc1\x83\xc6\n\xb8\xc6\xb8\x0f&c=\xb8\xdd\xb8\x11g\xdc\r\xbf\x87m\xb0\x9bl\x8e\xdd\x00\xdd\x90\x83\x99\xf3\x0e\x99-\xd5\xd3\xa3R\xbd1\x99\xf6\xd1\xdf\xd0\x05t\xfb\x85\xf7\x8b\xde\xce#n\xf8#\xb6\xa7\xb0S\x81\xb5\xbeO\xfc\x15,\x80J\xe3N\xe3\x97\x18\xdd\x17a\x85}\x10\x96\xc2\xd7\xe1\x03<\xe5'\xb8\xc2%\xc2\x01\x98\x1a\x9bC\xfb\x8dz\xa1\x1b\xcf{\x1c\xe6\x19\x8f\x1b^b\x85.c\x15\xcc\x85\xe7\xe0\x07\xb2\x04\x1dr\x10\xefX'\xaf\xe3yo\x80N:\xdf\xe8\x15:c+\xd1\x0f\xdb\xd0\x0b\x1azk=\xd6\x9f\xadZ\xcd\xc2\xe6*\xad\xb2\xe2k\xe5e\xa53g\x94L+\x9eZT8\xa5\xe0\xe2\xc9\x93\x82\xf9\x13/\x9a\x10\xc8\xcb\xf5\x8f\xf7\xa9\xde\x9clOVf\x86;\xdd\x95\x96:\xce\x99\xa2$'9\xec6\xab\xc5,\x9b$Q\xa0\x04&\xd5\xf9\xeb\xdbU=\xd0\xae\x8b\x01\xff%\x97Lf}\x7f\x07\n:\xce\x13\xb4\xeb*\x8a\xea/\xb4\xd1\xd5vn\xa6^h\xa9\xa1\xe5\x95\xff`\xa9\xc5-\xb51K\xa2\xa8\xe5P>y\x92Z\xe7W\xf5#\xb5~5J\x16\xcfkA\xfe\xaeZ\x7fH\xd5Or\xbe\x91\xf3\xf7p\xde\x81\xbc\xcf\x87\x03\xd4:wW\xad\xaa\x93v\xb5N\xaf\xbf\xb6\xab\xaf\xae\xbd\x16\xa7\xeb\xb7Yk\xfc5\x9d\xd6\xc9\x93\xa0\xdfjC\xd6\x86\x9c\x9e\xee\xef\xee'\xe9\x15\x8434\xbd\xae\xb4\x9f\x82\xd9\x81\x9b\xd23\xfd\xb5uz\x86\xbf\x96\xed@\x17\xf2\xea:\x96\xebM\xf3Z\xeaj\xb3|\xbe\xd0\xe4I:\xa9Y\xe6_\xaa\x83\xbfZO\x0er\x13\xa8\xe1\xcb\xe8\xa6\x1a]\xe6\xcb\xa8+\xd9i\xe0\x0e\xb5\x7f\xd2\x81\xbe;\xa3\n,m\x0f\xda\x97\xfb\x97w\xb4\xb6\xe8BG\x88\xad\x91\x12\xc4uk\xf5\xf4\xeb?p\x7f\xd1\xc5\xc9\x9d5-\xb7\x9f\xaf\xcd\x12\xfa\xea\xdc+U\xd6\xed\xeb\xbb]\xd5w\xcdk9_\xebc8\x14\xc29p,\xcd\xabo\xef\xab\xc7\xa5\xefD'6,Pq5\xba9\xd4\xa2\x93\xcd\xb8\xa4\xcaN\xc2N\x15?_\xa7\xbf\x8eI\xda\xafRu\x8b\xbf\xda\xdf\xd5wU;^Mf\x9f\x0e\xf3\xaf\xf3E23\xb5!\xe3\x04d\xd6\xa9}\xcd-~\x9f^\x99\xe5\x0fu\xd4z\xfaS\xa1o\xfeu\x03\x19\x9a\x9aq\xa1f\xf2\xa4~%%\xee\xd8\xfe\xa4\xe4\x04cw\x9c\xcft\x8e\xe98\xc7\xcd\x19\xd70\x7f\xcc\xb3\x84\xed\xc8\x7f)\x06\x84\xae.Sq'-~<\xd3\x0c\x86:g@\xdf\xb2\x19h\x86O\x88\xe0(}9\xde\xc8J\xddR\xd3\xde\xa7\x9429\x1b\xafKy\x8a_\xed\xfb+`\x04\xf8O\xfe\xf7\x85\x92\x8e\x84\xc4\x94\xa7\xfc\x15\x18\xcb\xe2d,\xd4P?\xca\xeb\xc1\xa0\x9e\x9f\xcfBD\xae\xc1;\xc5=V\xf0\xfe\xb4\xc9\x93\xae\x8dR\xbf\xbf[Q\x91\xa0\xfb\xa0\t}\xdb\x11*-@\xf7\xfb|\xec\x82\xef\x88j\xb0\x14;zx^K\xbc\xaf\xc2\xd2\xac\x08h\x05\xc1\x90N\xdb\x99\xe6\xc0\xa8&m!\xd3\x84G5c\xc3\xdb\xfd\x18\xc9\x83\xc0^\x9f\xd3ts`\xec/Yq\x8d\xab\xeb*\xd5\x89\xeb+\xd4\x9dq}\xc3\x02\x7f\xc3\xbc\xc5-j]_{\xc2\xb7\r\xcd\x17\xf4\xe2\xfa\x19c\xba\x04\xa7\x8f\xabi\x11\xb2h\x82\xa3Y\x02\xd7bP\xb6\x8e\x19\xb3N\x8b]\x17\xf3\xf0\xcf\xc4\x83zyT6cTr\tQ\xebu\xa5\xfd\x928\x0eY}\xbe\x7fsP\xd48\xcdFq\xf2\xc5\xb0\xc46\xf5\xd2\xe0\x85\xfd\xb2\x0b\xfa\x17l\xcf\xde'\xe0\x86\xf1\xa3\xb2\xa1yq_\x9f\xf5\x02\x1d\x86Z|\xc1K\x13\x04#\x1e\x9a[|j\x8d\x0e\x0b13\xf3\xf0/j\x1c\x98\xc1 \x94\xa5k\xe8\xb2\x1af\x80\xf1\x17\x17%\xba\x17\x18f%\xf8\x10>,:'O\xaa\xc7B\xd7\xd7W\xefW\xeb\xfb\xda\xfb:\xa2Fx\xa9_U\xfc}C\xf4y\xfa|_w]\xfbh\xe0D\x8d\xe1;\xb2\xf4\xfa;C\xe8\xab.R\x8aIA\xa1\xba\xdfO\xb6\xcc\xeb\xd7\xc8\x96\x05\x8b[\x86\xf0\xcb\x8b\xba\xa5\xb9%B\t\xadi\xaf\x0e\xf5\xe7\xa2\xaeeH\x05\xd0\xb8\x942)\x13\xb2\x8e\xca:\xd0@\xf0\x90\x11j\xe6\xf6YC\x1a@\x98kE.\xe0\xfdeQ\x02\\f\x1e\x95\x11X\x16\xa5q\x992*\xa3(\x13\xe32\x8d\xcb\xd8\xc3jLMs\xcb\xf9\xd1\xc3S24\x19\xa3\x91\x12\xfe\x82-\xb1o@2\x80/\xc5\x97\x92\x87\x88\xe0\x87\xee9U8pN\x93\xe0\xef\xa0\x8a\x07\xd0\x12\xdfAAZ\x8c\xdfj\x92!\x9bdhN\xd5Kj\xcc\x9e\xec\x1c<g\x8a\x92\x93\x0c\xe6\xf4\xa8\x11\x1b\xb4\xdb\xab\x17\"\xf3\xe9\xa0\xcd\xc6\x993\xdax\xbb\x03\xb9\x80j!^\xcd\xe1\xa0\x0b-\xaa\xa2 \xb6&'#vsI\xd4\xf8\x8b6\xc1n7-\xb4dz\xb3\x95$6T\xb1:p\x98bg\xf3)*Q\xf1\xbc|\x1c\xe0\x94\x83l(g\xd8hd\xce\xe2\xb2\x9c\xf9l\x90\xcd\x82\xcc\xdf4\x1c\x8f\\[NY\xab;\xa8\x9c\t\xf2\xa7\xad|\x04qy\xa2\xdbv\x12\x11T\x96\x8f\x943(\x9cRs\x9d6]\xc8\x92\xcd&\xb3d\x16\xcd\xa2)\xc3\x9d\xe9\xa6&\x9b\xd5nuX\x05S\x9a+\xd55\xce%\x98\xb2\x84t\x1fq&!r\x9b=>\xe2\xb2\xa6\xf8 \x18$\xc1`>>\xb7\x90\xb6\xa9)\xbe\xa2tW\xba\xcb\x99\x96J\x93\xa8?\xcfW4\xbdd\xfa\xf4i\xc5\x81\t\x01\xbf\xef!\xf2\xf9\x93\x8b7\x85z{\xe6\\\x7f\xef\x91\xcd\xb1~2\xf3\xde\x1f\x14\xd65~k\xd5\x9c=\xb1\xc3\xd2pZ\xf6\xec\xa5\xb1\xa3/<\x1e\x8b=\xd1Q\xb4gza\xdd\xc7\x8f\xfd\xe1\xb3\xfc\x1c<\xfbn|\xd3\xd9\x8c\xbe\xb7\xc0#\xda\xd7LR\x8e\xd9\xbcM&\xb2\x0c\x82\xc8\xfc\x0ff\xf9\xbb*Um\x94f\xdaD\x0be>\xb3p/Z\xac\xcc\xf9\x96\xff\xd5\x7f\x9a\x8d;\xd0n\xb3q\xef\xc5F\xddxz\xd4\x8dV\xe6\xc69\xca_\x82\xa3\x8el\xe4\x9e\x9c\xa3\x9cik\xfc\x00*\x99\x03\x9d3\x0b\xda\xca\x15\xe6HtA\x9a\x8f\xc3n\xe1w\xe7~O\xf5\x91&ixO\xact\xcf\xc8\x95\xf8\x82\x05\x8fb\x1c\x8d\xc7\xb3\xd8\x88}\x08\x1c\xc6\x01\xcd5.\xadX\x14r,\xd6]\xd6cVj\x95(\xb5\x99\xf1\x0eF\xc3\xc9<\x1aNf\x16N\x16v\"\xb3*\xcb\xa6\xa8\xf1\t?\t2\x9fj6v\x14\x93\xc2\x8e\x81\xfd\x13Z>;\x8a\x89\xb0s\x98\xda\xc2\x0e\xe2\xa06\xee\x17\x1b\xf7\x8b\x8d\xfb\xc5\x16\xf7\x0b\x16\x02\xcd\x8a[\xf87\x1cdN8\xe8\xbc8s\xc5\x1ddW\x1dDu49\xda\x1d\xdd\x0e\xb1,\xe4\x0e\xb6\xad\x1d\x8d\xba/\xe2\xae-.A/1\x8c\xa1WY>\xb3\xad\x80\x07\x1f\tNMA\xbf!\xf8\x11?\xfa<=\xfb\xfc\xf3#&ix\xe41\xba\xf8l=\x1d\x18i\x8cg\xa08\x82\x9es\xe0{\xf2i-\xa73\xe5\xeaT\xda\xa04\xa4^\xae\\\x9e*\xda\xec9\xc9II\x90\xee\x8eG\x84s\xd4}\xceQ\xf7!\xf3\xb7},\xab\x9c\x01\xee\xc9\x14\xc6\x9b\xad\xec\x88f\x85\x1d\xcc\xcc\xf2p2;\x999S\xcd$\xf8\x97\xe9vp\xaf9\xb8\xd7\x1c\xdck\x8e\xffk4\x9d\xfdR4e\x9c\x9f\x94\xa3\xde\x99\xa3\xac\x8d\xfb\xa71\x9e\x97\x89\x98\x8a{\xa7\r\xe2\x89\x95C1\xad|\xbe\x14\xe4\xc7r\x8aN\xbc\xafq\xd5}\xa1Ob\xaf\xc4\xb6\x90\x1b\x9e{\xa8mv\xe17c[\xa5\xe1$g\xe7\xbe\xd5\xcf\xc6FF~$\x90;on\xbd5\xcd\xc1\xaaX\x83\xf1\x91\x98#V\xe0\xbb|6yHK\xf7\x82'\x8d.\x14\xda\xa46\xcbB[\xa7p\xb5\xb4\xc6\xd2i3\xa7E\x8d\x0f\x06\xd9^S\x90\xd1\xe63.\xdb\xc3\xf0\x04\xe7o\xa4\xb3\xa9g2\xc5BgiF\xa1\xa7\xca\xd9\x98Y\xe5\x99\xe7l\xcd\x98\xef\xe9p\xae\xce\xec\xf0l4mL;C\xcf\xb8\x15p\x91dGzz\x93\xab\xdd\xd5\xed\x12\\\x9e\xe4{\x94]\nU\x141\xcbc\x95a\x98\xfe\x10\x88q`\x909\x91\xb0\x00LR\x14\xd3B\x85\x10\xf2\xc08\x8fh\xc3\xc2y\xfaK\xa54~y\xe9\x9a#j\xbc\xcd}\xed`\x19\xc0v\x85\xcc\x1f\xb9\x93\x1dl*\xcb\x84\xfcb\x1d#>\xd3\x8b\xbd\x81\xbc@1\xa3\xcf\xe4\xf8\x8b\xa7x\x89\xd7\x155\xcei\xadl\"\xd7T\xc5\xcc\xabk\xbc\xde\x9ay\xbd\xcd\x95\xb5\xdc\xfcb\xaf\\)\xcf\x95\x05\x99W_\xd9\xce4\xb2j\xb3\xd1\x85\xb2\x9b\xdd\xac\xeca\xab\xcbI\xec~e\x0f[W\xe6Y g\xe4\x14\x97\x9c_&\x82mA^'>@\xd9\xda`\xf0\xcc\xda\xf3\xae\xf7\xe4H\x1b**O\xf2\xb21\xb2\xb6\x9c\xa48g\xcet\xce\x8c\xdf5Z\x90\xb5\xebH\xba\xc9\xe4\x1f\x0f)\nL-\x82\x94T\xd9\xe7rM-\x9aN|\xec\xda\xc7\x9b\x84+\x86'}2\xf4q\xec\x14I}\xfb\x97$\x89\x9c\xfb\xc8\x1a\xd9\xbc\xec\xce\x91\xb7\xe8<\xfb\x8cE[o|\x82,J\xff\xfe \xf1\x12\x81\xd8\xc9E\xb1wb\x9f+\xea\xde\xe1.\xf2\xc0m5]\x8f\xb1:t+\xa2\x12\xcc&\x814j\x0eje^\x108\xc6\x0b9\xc7\x9d\x0e\xccY)\x8c\xa36\xe6\n\x81cT\x8f\xf0\xcbA\xf5\x88\x96\xc28*2\x1f\t\x1c\xf3\xd1\x8c\xe1\xa3m\x8c\x93\xa63\xe7I\xec:Jf\x14sZ<-N\xa7\x14\xc6\xe9\xf8<N\xb5\xbc\xb4\xf4\xe2d\xc9+\xed\x94\x8eK\xe2\\D\xa7%\xc1+uKa\xc9\x90D\xfc\xb0\xb6R!\x8f\x97,6\x13/]iS\xa7\x15\xef\x04r\x00Nct\x83\n\xc7\xe0\x04~zc\xb8\x0c&2\xf4\xac\x96\x9d\x94\x84\x9c\xc8\xb3\xd2\xca\xb6\x02\xa9<7\xcd,\xe8x\xbd\xe7y\x195\x8c\xd1T=\xa7Y97G\x9c\xd5t^\xaa\xe2\x8d\xae]\x87\xb9:\x82\xc5\xab\x92]\x15\xeb\xfd\xe3\xc3\n\xd9\xad\x83\xd2\xf0\xd9z\x96o\xb5\x98o\x130\xdf\x1c\x90A\xf6\xefKs\xb3\x95\xc6E\x8d\x8f\xf8\x92\xc9\xc8h\x9d\x8c\xcb\xe0\n\xa7l\xcd\xb0\xcf2]b^d\n\x99W\x98V\x9a\xcd\xc5J\xa9\xb3\xd45\xcd]\xa748\x1b\\u\xeeV\xa9\xd52_is\xb6\xb9\xe6\xbbWK\xab-\xcb\x95\xd5\xce\xd5\xae\xe5\xee\r$\xcdb\x92\x1c\x97\x0b\xcdR\xb3\xf5r\xfb*\xa1S\xea\xb4\xae\xb2[\xd3=\xa2\x9c\xe2\xb1\xd9RG\x13\t\x99\xbf\xf0\xdbKe\xd5{\x1c\xbb\x9e\xd4\xdc,\xfef\x92\xa5\xf1\x18\xc7d\xd2RXQ\x93\xf9\xdb\x89\xac$\xa4\xa7\x07y\xc03\x86G;c\x92\x93\x13\x0c\xcf\x02\x9e\xc8\xb9y\xc5Sd\x02\xb2\"\xab\x98B\xac\xa4\xf2W\x19\xb9\xf0x\x16\xc9b\x16\xabY*\"\x9f\xc4S.\x89'Y\x12O\xc2\xa4\\\xb0'\xb1j\xea\xe4\xa5\xd4\xce/\xcc\xc3/\x8c'\x1b$\xf1{\xb2\xf3ks\xf1\x0b\xd2p9/T\xa2\xa3y\x9a\x02\x9f\x8d\x95^\xc4\x85\x99,\x1d\xf9\xe5\xb5\x8d\xdd\x0e\xcb>LF,\xb5m_\x08\x83\x89\x9c\xac<\x89\x97\xba\xb6\r\xd6\xe2\x9b\xbffY -\xb0,\x95\x96ZD\xd2\x16\x02f5N)\x99\x8e\xa9\x98\x96\xca\xf3r\\*KG\xac\xc2\x98\x8c\xb5\x8fn}\xf1\xb7\xc4u\xc3\x9f\xee8\x1e;9\x14\xb9\xfd\xb6\xc8\xc0\xe6\xdb#t\x1c\x99p\xf7\xb5\xb1wG\x8e\xfc\xe9\x1b$\x878\x0e\xbfz\xf8\xe7/\xbez\x88\xfd\x9b\x85\xbdvf\xecxd\x97\xbcxIr\xf9_\xcd63\xff\xef\xcb#\xefO\xc8g\xf4\xd5\xa6\xb2}g\xf7\x8e\xacP\xc0l\xc7\xae\x85\xdbC|\x9c\\\x11\x9b\x035\n\x9c\xdd{\xf6z\x05\xc64\xa3\xcf\x02\xd3y\"\xf6\xff\xb3\xffO\x8f\xf42\xfb\x0c\xc7O\xf1\xf7\xd9\x1b\x1d\xef?\xfa\x95\xf6\x8b\xe2\xf6\xff\xc9G\xec\x81\x86\x7f\xa5#/\xb3\xaa8fW\x8b$\xed?\xda\xde\x807\xc8Llo^\xd8\xe8\xc6\x7f\xb7\t7\x9d\xdf\xc4)\xacIe\xfc\xca\x17\xc0\xa7P\x0e\xdf\xc3\xef1\x14\x14(\x80Ex\x86\x1f\xd9~\x82_n\xb0.\xa2t1\xfb\x95G\xb4 \xdf\x0b\x90\xe0\tx\xb0\x17\xe7)$\xc1=\t^\x80b\xf4|\x9c\x17\xd1\xe6\xf5\x04/\x81\x0b>I\xf0&\xf0\x10\x11\x9a\xa1\x0bVB\x0f\x16\xde8\xee@\xb8\x12\xd6\xc058\xaf\n\x1b\xb8v\x19\xe2Q}/t\xc2j\xe8F\x8buh\xbb\x0e\xa5\xab\xe0:\xae\xbd\x06\xf5\xbd([\x85\xad\x13\x96\xc3\xc5(\xadE;\x155k\xf8l\xeb\xd1\xa2\x13|P\x85g\xfd:\xb6z\x98\rA\xec\xb1Y\xd8\xb8F\xdc\xcd|\xb4X\x81\x96\xab\xf8\xecM8C=\x94~\xe5\x88R\x98\x82\xad\x10\xd7\x9b\xc2\xdbW\xd9.\xc2\xd9\xd7\xe1.V\xf2\x13\xaa\x89Q_5b\xec\xb75c\x02\xfb\xad\xee\xcb\xcf\x104\x0b\x17\r\x04\xdc\xdec\xcf\t\x13\xe1\x04\x02\x15&F\x82\xd9\xde!a\x82\x90\x1d)\xf3jQ\xc1?\xe0L+J\xae\x9a,\xb07\xcf\x02\x8eU\xc4k\x10\xf6\"\xecG\x10a\x89\xc0\xbe))\x88oF\x08#\xecE\xd8\x8fp\x0c\xc1\x84\x1b\xc9\xe1Z\x15a\r\xc2N\x84\x13L#d\x0b\x9e\x88\xeaU\xaa&\x08\x1986\x03#!YH\x87S\x08\x06\x82\x00^\xc4\x05\x08s\x11\x96 lC\xd8\x89`\xe2vL\xb2\x06\xe1f\x84\xfd\x08\xa7\xb9F\x13\xd2#\xf7M\xc5\xbd\xa7G\xee\xe0d\xe0\xaaUE\xbc\xdb\x11\xef\xb6\xb6\xf1\xee\xc0e\xa18m\x9c\x17\xa7\xb5\x97\xc6\xcdJ\xe3f\x85\xc5q\xf1\xc5\xd5q:aR\x9c:\xf3\x8a\xc2\x8cZ\x1dE\x07\xaa\xf0\x05\x13\x0f\xe9\xc2\x8dw#&\xf4\x05H&\x04\xbc\xb0KH\x03\x1d\x81\n\xa6\x84D\x13\x9c\x03\xb9\x81\xa2\x9d\xfb\x05\x11\x88@\x05\x82\x81\xe65\x0e\x08$\xe2H)\xaa\xb2R\x83\x9e\x02'x\xe9'\xf4d\\CO\x0e$\xa5\x14\xed\xac\xfa:}\x0f\xf6\"\xecG\x10\xe8{\xd8\xde\xa5\xef\xc2\xcd\xf4\x04\xf39\xe2J\x84\x9d\x08\xfb\x11\x8e\"\x9cB0\xd1\x13\xd8\x8ec{\x87\xbe\x03\xc9\xf4wP\x80P\x89\xb0\x04a'\xc2~\x84S\x082\xfd\x1db\x85\xbe\xcd2\x99c\xc6W\"P\xfa6b\x85\xfe\x16\x8f\xf5[\xc4\xc9\xf4-\xe4\xde\xa2o\xe1\xd6\xde\x88\x94\xcc,\x1a\xe2L\xb0 \xc1x\xf3\x12LzV\x82q\xba\x8a\xa2\xf4\xf5\xc8\xe7\x131\xa2\x02x\xd3\x18Q\xcf\n\xe3\xa1\x02\xa6\n\xe3#y\x85\xde\xa8\xe0\x8e\x94\xaf\xf4F\xe9\xfb\x03j\xd0\xbb\xabj\n\xfd\x05\xe8\x08X5\x10+\x08*B\x13B;B7\x82\t\xb97\x91{\x13\xc2\x08\xf7 \xecB\xd0\x110\xca\x10+\x08*=\x84p\x18\xe1M\x98\x82\xa0!4!\x98\xe9\xb1\x08.\x13\xa5G#\x81jo\x95\x8b\xbeF_\x86t\xf4\xf8\x11\xfa3N\x0f\xd3\x978}\x95\xbe\xc8\xe9+Hs\x90\x1e\xa2/Er\xbcPeC=\xe0\x18\x05\xa9\x82\xb4\x00\xf5\x12\xfd\xe9@\xae\xd3kT\xa5\xd0\xfd\xe8;/\xe2\x02\x84J\x84\xb9\x08K\x10\xb6!\x98\xe8~:>\xb2\xdc\xeb\xc4I\x9e\x85C\xf8\x99\xeb\xa5\x11\xf8\x98\xd3\xc7\xe0\x113hWy\xb5@\r\x06\xa0\xcaP\xa0\xf4k\xc8!\xda\xa9\xee\x0cP-\xb0\xfdA\xec2\x14\xb8\xfb>\xe4\x18\n|\xf3N\xe4\x18\n\\\x7f\x0br\x0c\x05V]\x8b\x1cC\x81\xe5W!\xc7P`\xf1\x12\xe4\x18\n\xccmF\x0eQ\x94>\xf4L\xee\x04o\xc9\xdc\xab\x89Z\x95L7\xa0\x976\xa0\x976\xa0\x976\x80H7\xb0\x06\x9f\x8blo\xdf\x89\xe4\xe7\xa3\xc7vh\xc1\x89\xf9\xde\xf00\t?G\xc2\xf3I\xf8\x11\x12\xee$\xe1M$|\x0b\t\x97\x93\xf0\x15$\x1c$a\x0f\t\xe7\x90\xb0F\xc2\xcf\x92\x19\xe8\x8a0\xd1\x06/\xe8\xce\xd4\xdc$|\x88\x84\xf7\x90p\x0f\t\x07H8\x8f\x84sIX%%Z\x94\xfa\"\x97N\xe5\xa4\x8e\x93\x81*\x96tH\xbfV\x81\xd5'\x99\xfa\xd0\xa3>\x8cy\x1f\xd6\x84\xfd\x88\x8f\"\x18\xbc\xa7\xa1\x91:>n\x9c\x91\xc3\xe8\xf8\x81\xfc\xcax\xff\xe2\xd2\xa25U\x97\xd0\x838\xf0 ^\xc3A8\x8e \xe2\x05\x1d\xc40:\x88\x93\x1c\xc4\t\x92\x11W\",A8\x80p\n\xc1@0\xa1\xf5x\xdc\xf86\x8e\x93\x11\x17 T\",A\xb8\x19\xe1\x14\x82\x89o\xe7\x14\x02\x855\x89-\xee\xe5\x1b+Hlz.\xeb\xd1\x83\xd8\xd8\x8f\xc0>\xea\xd3\xb2\x15\x8f\x12T.\x11\xb6yHr\x0e\x99\x9bc\xe4\xd0\x12p\xb9\xb0\";S\xcc)Q\xe2\xd8\xf7\x99\xe3o\x9f9\xc0Re\xa1w\xd3m\x90\x8d\x17qO\x82n\x8b|\x9e\xed\x8d\x92oG\x02\xcfz\xab\xd2\xc8\xb7 \x07\xbf\x9bx\xc9L\x08\x90<\xa43\xa0\x87\xf7\xa7\x81\xc7\xcch1x\xe8\x93H\x8b\"\x9eE8,9\x12\x98\xe4\x1d&Il\xd4>\xef\xe7\x9e\x0f\xbc\x1f{\xa2\x14\xd9\x8f<\xcfz\x7f\xa5FE\x12\xf1\xfe\x12%O\xee\xf3\xfe\xc2\xb3\xd5\xfbJA\xd4\x8c\x92\xe7\x02Q\x82dX\xe5\xa6C\x9e\x19\xde=\x87\xb8\xe9-\xa8\xd8\x11\xf1nbd\x9f\xf7&\xcf,\xef\xd5\x1e\xae\xe8\x8c+\xae\xe8\xc1\x9e\x96\xec\x9d\x1fX\xec\xbd\x04\xe7\xab\xf5,\xf5j=8\xe7>o\xa5\xe7\noy\xdcj\x1a\x1b\xb3\xcf;\x05\xb7\x10\x8c\xb3\xf9\xb8\xd9\x89\x1e\xbe\xa8?\x87O\xb8\xb0$J\xba\xb4I\xf2v\xb9\x05\xbf\x1fO\x97\x8b\xe4I\xb2O\xf6\xca\xd9r\x96\x9cjv\x9a\x15s\x92\xd9n\xb6\x9a\xcdf\x93Y4S3\x98S\xd9\xff\xa2\x82\xec-5\xd5\xa40b\x12\x19\x169\xafP\x86\xd9\xcb\t+z\xc4L\xf1#T\x1f'4\xd0\x86\x05\xd5\xa4A?\xb0\x0c\x1a\x96\xaa\xfa\x99\x05\xfe(\xb1\xce[\xacK\xfej\xa2;\x1b\xa0\xa1\xb9Z\x9f\x11l\x88\xca\xc6|\xbd$\xd8\xa0\xcbM\x97\xb7\xf4\x13rw\x08\xa5:\xdd\x12%\xd0\xdc\x12%\x06\x13m\xceb\xbfM\r\x01!)\x9b\xef\xcab\xf4\xa2\xcdw\x85B\xe0v][\xe9\xaetV\xa4\xcc\xac\xaf\xfd'\xa8=\x81\xcf\xfbR\xe7\xbe\x80\xcf\xd6\xb77,h\xd1\x7f\x98\x1d\xd2\x8b\x18cd\x87\x1a\xf4\xffb?^\r\x91O\xc9\xe9\xba\xda!\xf2gFB-CB\x05\xf9\xb4n>\x93\x0b\x15\xb5\xa1PC\x94,\xe2v\xa0\x92?\xa3\x1dF\xcc\x9f\xb9\x9d\x19?\x98\x99\x1d\xa8\xe6\x9c\xb8\xdd\x8e\xb8]\x1e\x8eG\xbb\\F\xd0\xceb\x81<n\x97g\xb1p;\x910\xbb\xfe\x9e\xdc\xba\xda\xfe\xdc\\n\x93\xaeB\x0f\xb7\xe9IW\xcf\xb79\x94\x876yy\xdc\xc6\x15\x86C\xdc\xe6\x90+\xccl\xf4\nn\xe2\xf1\xa0I\x8e\x87\x9b\x90L\xf0p\x13\x0f\xc9\xe4&\x8b\xbe0)H\x98l\x1d3\xd9\xcaW\x12\xc8\x176\x9e\xb8\x8d\xe3\xc4\xa8\x8d\xe3\x04\xda|\xf9\x0b\xf3\xbfx:\xab\x83A2P\x16Z\xd6\xca~\xf8k\xf7\xd7u\"\xb4\xebw\\\xdb\xe5\xd6\xc3KU\xb5\x7fY(\xf1\x8b`\xa0}\xe9\xb2.F;:\xf5\x90\xbf\xb3V_\xe6\xafU\xfb\xcbZ\xff\x89\xba\x95\xa9\xcb\xfc\xb5\xfd\xd0Z\xd7\xdc\xd2\xdf\xaau\xd6F\xca\xb4\xb2:\x7fGmh`VSq\xc9\x05km\x1d[\xab\xb8\xe9\x9fL\xd6\xc4&+fk\xcd*\xf9'\xea\x12\xa6\x9e\xc5\xd6*ak\x95\xb0\xb5fi\xb3\xf8Z\xc0c\xbc\xa9\xa5\xdf\x0c\xd5!\xfc\xb6\xc9\xe9\x00\xb5Y1^\xdb\xb3|\xa1j\x97\xd2]\xc1\x83\xb7\xcc\xe7\xde\x945\x8co+\xbb\xc1\x16\x0c\xe9v\x7f\xb5\xee@`\xaa\xc9U\x93\xab\x98\ns\x8a\xa9\x92\xd8\xaf\xbb\t\x95{S\x99/k\x98\xecN\xa8\x14\x14\xa7\xf8\xab!\xd8\xbb\xbeg=\xb8\xebV\xd6\xc6\xffz\xf0AQ\xefz\xe6\xf08\x0e\xf6\xfc\xab\x07uu\xba\xd6Q\xdb\x83\xdf\x1f\x1a\xf4\xfc\x05\rz\xe5\xbc\xc5-\xfd\xb2\x8c\xd2vv$\xbdtTf\xb3\xd5\xe1W\xfd\xb8\xf0b\x14\x962\xa1 \x8c\x192Y9\x93Y,\t\xc3/\xdf\xff\xfa\x04\xadaY\x10\xa6\xcf\x0e\x10-\x87\xf4BOH\xd0s\x1a\x9a)\x96\x82\xe6\xc4\xcfh\xc3\xf8.\xc5>\x1ez\xf0kzo\x0f\t\x92\x9e\xd19\x12\xdb\xc6/\xf7\xf1>\xb03\x8fB\xef\xfa\x04\x97\xf0Eo\x82\xc6G\xe2\x90\x9eQ\x97\x8c=\xccY\xc11\x8f\xf5\xe2\x84\xf0?u\x1e%Z\nendstream\nendobj\n12 0 obj\n<<\n/Filter /FlateDecode\n/Length 264\n>>\nstream\nx\x9c]\x91\xcfj\xc4 \x10\xc6\xef>\xc5\x1c\xb7\x87\xc5lv\xb3\xddB\x08\xb4)\x0b9\xf4\x0fM\xfb\x00F'\xa9\xd0\xa8\x18\xf7\x90\xb7\xaf:\xcb\x16:\xa0\xf0s\xe6\xd3\xf9F\xdev\xcf\x9d\xd1\x01\xf8\xbb\xb7\xb2\xc7\x00\xa36\xca\xe3b/^\"\x0c8i\xc3v%(-\xc3\x95\xf2.g\xe1\x18\x8f\xe2~]\x02\xce\x9d\x19-\xabk\x00\xfe\x11\xb3K\xf0+l\x1e\x95\x1d\xf0\x8e\xf17\xaf\xd0k3\xc1\xe6\xab\xed#\xf7\x17\xe7~pF\x13\xa0`M\x03\n\xc7x\xd3\x8bp\xafbF\xe0Y\xb6\xedT\xcc\xeb\xb0n\xa3\xe6\xaf\xe2su\x08e\xe6\x1du#\xad\xc2\xc5\t\x89^\x98\tY]\xc4h\xa0>\xc7h\x18\x1a\xf5/\x7f\"\xd50\xcao\xe1s\xf5>V\x17EY4\x89\xca\xfbL\x87\x03\xd1\x03\xd1\x91\xe8\x89\xe8\x94iO\xba\x8at\xf10\xd1\xb1\":\x13\xb5\x99\xaa\x92\x88\xfa\xb9\xbe\x9c:K\x13\xbc\xd9\x96\x17\xef\xa3\xe3<\xe6l5\x99\xd4\x06o?\xe1\xacK\xaa\xb4~\x01\xf7\xd5\x82P\nendstream\nendobj\n5 0 obj\n<<\n/Filter /FlateDecode\n/Length 199\n>>\nstream\nx\x9c\x85\x90M\n\x021\x0c\x85\xf79E.`l\x9a\xb6\xe9\x80\xb8\x10\x1c\xd7Jo\xe0\x1f\x08.\x1c\xef\x0f\xa6\x1d\x7f@F$\xa5\t\xaf\x1f\xaf\xafetV3\xb6M;\x8f\xfb+\xdc\x80\xb1\xd6n\xf3\x1c\x863\xcc7\x82\xe7;8\xd2\xd8\xf8\xf7`|m\x99\x13\xb2\x8b\t\x87#\x9c`k\x1e\x8d\xaa\x1e\xe3\xf0\xcbC}]\xe6\xb2*0\xef\x03r\xa0\x94\x92b9\x01\x7f\x92\xb1\x18k\\\xb9\xc2\xc29\xbfZb\xb9\x00;\x8a9\x88\x1d\x97C\x95Cnr&\x8e\xcc\xfc\x91\xfb&\x0b\xf9\x988\xfe\x93\xa3o\xf2\xba\xd4@\xef\x04\"$]\xce_9\x9cL\xb2JA\xdd7+#\xdb\x91\xaa\xfd\xd2\xeb6\xaf\x93/\xf1\xdd\x94qJ\xa4Y\xe4g\x88-<\x00\xa3|\\i\nendstream\nendobj\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n/Lang (en)\n>>\nendobj\n14 0 obj\n<<\n/Type /ObjStm\n/N 2\n/First 9\n/Filter /FlateDecode\n/Length 113\n>>\nstream\nx\x9c3R0P0V01\xe2\xb2\xb1\xe1\xd2\x0f\xa9,HU\xd0\x0fHLO-\xe6\xd2\xf7\xceL)V\x886\x01\xca\x07\xc5r\xe9;\xe7\x97\xe6\x95(\x18r\xd9\xd9\x81U\xfa\xe6\xa7\xb8$\x96\xa4*h\xb8X\x19\x19\x18\x99\x1a\x98\x1aY\x18\x19\x9a\x18\x19\x9aGir\xe9\x07\x14\xe5\xa7\x94&\xa7\x16)h\x04\xa4\xa4\x95\xe4\xe7\xe7\x14+\x04\xbbxk\x82\xf4\x02\x00\x17\x0e\x1c\xd9\nendstream\nendobj\n13 0 obj\n<<\n/Type /ObjStm\n/N 1\n/First 4\n/Filter /FlateDecode\n/Length 120\n>>\nstream\nx\x9c3Q0\xe0\xb2\xb1\xe1\xd2\x0f\xa9,HU\xd0\x0fHLO\xe5\xd2\xf7MM\xc9Lt\xca\xafP\x886P0P034R0\xb74\x8a\xe5\xd2\x0fJ-\xce/-JN-V\x00\xe9p\xad(q\x0f.I,I\x05\xf3\xdc\x8d\x15\xcc\x80\x8a\x83\xb8\xec\xec\xb8\xf4\xdd\xf2\xf3J\xc0\xa2n&\n\x160Q\x90\x843P\"5\xaf\xa4X\xc1\x14,\n\xb4\xaf\x08\xc8U0\x82\xa9\x01\x00T\xa1$\x10\nendstream\nendobj\n7 0 obj\n<<\n/Type /ObjStm\n/N 4\n/First 22\n/Filter /FlateDecode\n/Length 428\n>>\nstream\nx\x9c}R]k\xdb0\x14}\xd7\xaf\xb8\x8f-#\xfa\xb4$\x0bJ\xc1i\x96\xd5ei\xa1\xc9\xd6\x07\x93\x07\xd5\xd6<\x83c\x1b\xdb\x83\xe5\xdf\xef*%\xd9X\xc7^\x8c\xee9\xba\xf7\xdcsd\x03\x1c\x04\x07\x99\x80\xc3\x8f\x81\x14\xb4N\xc9\xcd\ra\xa5\x07A\xd8r\x03\xec\xb1\x1f\x0f\xbe%\xb7\xb7'|w\x1c\x02\xb0u\xdf\xcd\xab0\x95c3\xcc\xfdHN\xf5\xa3? \x93m\x1f\x1e\xd6\x9f?dc\xe3\xdb\xcd\x0e\x99\xd6\xd7\x13$\x84eS\x19\xba\x19\x1c\xd7TZ\x95 \x12\x07Dh!\x85\xa0N$\xdc\x10\xb6\x9d\xc3\xe1+$\x9a\xa6.MTJ\xd8\x9d\x1f\xeeCS\x7f\x9f\xc1\nD%W\xb8V>\xfb\xb6)\xb3\xaen\x03\xf07\xf5\xe5\xb2\xff\t\xc5\xc2\x98\x84j\xcdm\n\x0b%\x13j\xb9\xe5\n$\xe7\xd1&*\xa7\xda\xa9t\xff\xd6\xb1n\xda A\x08\x8c\xe0\xf9\xbd;\xf2\x97\xc7\x18S\xbc\xc8\x96~\n\x91zou\xfb\xe3u>\xf5\xdf\xe5\xabx#\x0e\x93$V\xbb\xfeS\xbe\xda\xf8\x01X^\xa1\xe3f>\x9e\xe0\xedqB\xbby\xf7\xad\x87(\xfe\x1c\xeaf\x9a\xc7#\\eU\xff\x1a\xae\t{\x1a\xab06]\rW\xe7\xbe\xeb(3\x0cm8\xc4\xe4x\xdc\x9b\xbd@\xa1\xa0\x90\xd6\xd2Ta>{P\x0e\n+%\x15\xc6:\x8b[\x1b\xc1\x91\xc2@\xf1|\xc1\xf7\xa0\x05\x14\xc6\x18\xea\x9c\x14n\x8f\x0c\x14Z\x1b*\xb4T\t\x968D\xfe1\x84\xc3o\x12\x13\\\xbd\x80\xd5\xfc_\xb9]b\x88 \xff_`\x1f\xbb\xb2\xaf\xa2\xbdK,\x8b\xfb\xf3oQy|!\xec\x9a\xa0p1x\x94\xdc\xf5_\xba\x06;\x02\x08y~\xb4_\xd6y\xc0\x86\nendstream\nendobj\n15 0 obj\n<<\n/Size 16\n/Root 1 0 R\n/Info 3 0 R\n/ID [<D0514D1699759F15301F8064EEF90CF2> <8C0069462947B6C04035DF9D5E666FAD>]\n/Type /XRef\n/W [1 2 2]\n/Filter /FlateDecode\n/Index [0 16]\n/Length 65\n>>\nstream\nx\x9cc``\xf8\xff\x9fQ\xc6\x89\x81\x81\x89\x81\x0fB021\xf0200J\x1b\x83\xb8\xec@\x96\x9c!\x84\xc5\x0c\"\x98@\x04##\x03?PB\xf2\x11\x90\x90\r\x01\x122u@B\x01h\n\x00\x03P\x05\xd3\nendstream\nendobj\nstartxref\n8258\n%%EOF\n",
			content_type='application/pdf',
			headers={'Content-Type': 'application/pdf'},
		)

		server.expect_request('/search').respond_with_data(
			"""
            <html>
            <head><title>Search Results</title></head>
            <body>
                <h1>Search Results</h1>
                <form>
                    <input type="text" id="search-box" placeholder="Search...">
                    <button type="submit">Search</button>
                </form>
                <div class="results">
                    <div class="result">Result 1</div>
                    <div class="result">Result 2</div>
                    <div class="result">Result 3</div>
                </div>
            </body>
            </html>
            """,
			content_type='text/html',
		)

		yield server
		server.stop()

	@pytest.fixture
	def base_url(self, http_server):
		"""Return the base URL for the test HTTP server."""
		return f'http://{http_server.host}:{http_server.port}'

	@pytest.fixture(scope='module')
	async def browser_session(self, event_loop):
		"""Create and provide a BrowserSession instance with security disabled."""
		browser_session = BrowserSession(
			browser_profile=BrowserProfile(
				headless=True,
				disable_security=True,
			)
		)
		yield browser_session
		await browser_session.stop()

	@pytest.fixture
	def llm(self):
		"""Initialize language model for testing with minimal settings."""
		return ChatOpenAI(
			model='gpt-4o',
			temperature=0.0,
		)

	@pytest.mark.asyncio
	async def test_search_google(self, llm, browser_session, base_url):
		"""Test 'Search Google' action using a mock search page."""
		agent = Agent(
			task=f"Go to '{base_url}/search' and search for 'OpenAI'.",
			llm=llm,
			browser_session=browser_session,
		)
		history: AgentHistoryList = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert any('input_text' in action or 'click_element_by_index' in action for action in action_names)

	@pytest.mark.asyncio
	async def test_go_to_url(self, llm, browser_session, base_url):
		"""Test 'Navigate to URL' action."""
		agent = Agent(
			task=f"Navigate to '{base_url}/page1'.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=2)
		action_names = history.action_names()
		assert 'go_to_url' in action_names

		# Verify we're on the correct page
		page = await browser_session.get_current_page()
		assert f'{base_url}/page1' in page.url

	@pytest.mark.asyncio
	async def test_go_back(self, llm, browser_session, base_url):
		"""Test 'Go back' action."""
		# First navigate to page1, then to page2, then go back
		agent = Agent(
			task=f"Go to '{base_url}/page1', then go to '{base_url}/page2', then go back.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=4)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'go_back' in action_names

		# Verify we're back on page1
		page = await browser_session.get_current_page()
		assert f'{base_url}/page1' in page.url

	@pytest.mark.asyncio
	async def test_click_element(self, llm, browser_session, base_url):
		"""Test 'Click element' action."""
		agent = Agent(
			task=f"Go to '{base_url}/page1' and click on the link to Page 2.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'click_element_by_index' in action_names

		# Verify we're now on page2 after clicking the link
		page = await browser_session.get_current_page()
		assert f'{base_url}/page2' in page.url

	@pytest.mark.asyncio
	async def test_input_text(self, llm, browser_session, base_url):
		"""Test 'Input text' action."""
		agent = Agent(
			task=f"Go to '{base_url}/search' and input 'OpenAI' into the search box.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'input_text' in action_names

		# Verify text was entered in the search box
		page = await browser_session.get_current_page()
		search_value = await page.evaluate("document.getElementById('search-box').value")
		assert 'OpenAI' in search_value

	@pytest.mark.asyncio
	async def test_switch_tab(self, llm, browser_session, base_url):
		"""Test 'Switch tab' action."""
		agent = Agent(
			task=f"Open '{base_url}/page1' in the current tab, then open a new tab with '{base_url}/page2', then switch back to the first tab.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=4)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'open_tab' in action_names
		assert 'switch_tab' in action_names

		# Verify we're back on the first tab with page1
		page = await browser_session.get_current_page()
		assert f'{base_url}/page1' in page.url

	@pytest.mark.asyncio
	async def test_open_new_tab(self, llm, browser_session, base_url):
		"""Test 'Open new tab' action."""
		agent = Agent(
			task=f"Open a new tab and go to '{base_url}/page2'.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=2)
		action_names = history.action_names()
		assert 'open_tab' in action_names

		# Verify we have at least two tabs
		tabs_info = await browser_session.get_tabs_info()
		assert len(tabs_info) >= 2

		# Verify the current page is page2
		page = await browser_session.get_current_page()
		assert f'{base_url}/page2' in page.url

	@pytest.mark.asyncio
	async def test_extract_page_content(self, llm, browser_session, base_url):
		"""Test 'Extract page content' action."""
		agent = Agent(
			task=f"Go to '{base_url}/page1' and extract the page content.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'extract_content' in action_names

		# Verify the extracted content includes some expected text
		extracted_content = None
		for action_result in history.history[-1].result:
			if action_result.extracted_content and 'This is test page 1' in action_result.extracted_content:
				extracted_content = action_result.extracted_content
				break

		assert extracted_content is not None, 'Expected content not found in extraction'

	@pytest.mark.asyncio
	async def test_extract_pdf_content(self, llm, browser_session, base_url):
		"""Test PDF extraction via the 'extract_content' action."""

		agent = Agent(
			task=f"Go to '{base_url}/dummy.pdf' and extract the page content.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names or 'open_tab' in action_names
		assert 'extract_content' in action_names

		extracted_content = None
		for action_result in history.history[-1].result:
			if (
				action_result.extracted_content
				and 'hello' in action_result.extracted_content.lower()
				and 'pdf' in action_result.extracted_content.lower()
			):
				extracted_content = action_result.extracted_content
				break

		assert extracted_content is not None, 'Expected PDF content not found in extraction'

	@pytest.mark.asyncio
	async def test_done_action(self, llm, browser_session, base_url):
		"""Test 'Complete task' action."""
		agent = Agent(
			task=f"Navigate to '{base_url}/page1' and signal that the task is done.",
			llm=llm,
			browser_session=browser_session,
		)
		history = await agent.run(max_steps=3)
		action_names = history.action_names()
		assert 'go_to_url' in action_names
		assert 'done' in action_names

		# Verify the task was marked as successful
		assert history.is_successful()

	@pytest.mark.asyncio
	async def test_scroll_down(self, llm, browser_session, base_url, http_server):
		"""Test 'Scroll down' action and validate that the page actually scrolled."""
		# Create a test page with scrollable content
		http_server.expect_request('/scroll-test').respond_with_data(
			"""
            <html>
            <head><title>Scroll Test</title>
            <style>
                body { height: 3000px; }
                .marker { position: absolute; }
                #top { top: 0; }
                #middle { top: 1000px; }
                #bottom { top: 2000px; }
            </style>
            </head>
            <body>
                <div id="top" class="marker">Top of the page</div>
                <div id="middle" class="marker">Middle of the page</div>
                <div id="bottom" class="marker">Bottom of the page</div>
            </body>
            </html>
            """,
			content_type='text/html',
		)

		agent = Agent(
			task=f"Go to '{base_url}/scroll-test' and scroll down the page.",
			llm=llm,
			browser_session=browser_session,
		)

		# First go to the page
		await agent.run(max_steps=1)
		page = await browser_session.get_current_page()

		# Get initial scroll position
		initial_scroll_position = await page.evaluate('window.scrollY')

		# Execute a few more steps to allow for scrolling
		await agent.run(max_steps=2)

		# Get final scroll position
		final_scroll_position = await page.evaluate('window.scrollY')

		# Verify that scrolling occurred
		assert final_scroll_position > initial_scroll_position, 'Page did not scroll down'

		# Verify the action was executed
		history = agent.state.history
		action_names = history.action_names()
		assert 'scroll_down' in action_names
