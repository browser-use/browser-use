#!/usr/bin/env python3
"""
üåê Browser-Use Web Backend
API FastAPI avec WebSocket pour chat temps r√©el et int√©gration Browser-Use
"""

import asyncio
import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import uvicorn

# Browser-Use integration
from browser_use import Agent
from browser_use.llm import ChatOpenAI

# Configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration environnement
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# Models Pydantic
class ChatMessage(BaseModel):
    type: str  # "user", "agent", "system", "error"
    content: str
    timestamp: Optional[str] = None
    sender: Optional[str] = None

class TaskRequest(BaseModel):
    task: str
    model: str = "gpt-4o-mini"
    temperature: float = 0.7

class AgentStatus(BaseModel):
    status: str  # "idle", "busy", "error"
    current_task: Optional[str] = None
    uptime: Optional[str] = None

# Gestionnaire de connexions WebSocket
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.agent_busy = False
        self.current_task = None
        self._lock = asyncio.Lock()
        
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"Client connect√©. Total: {len(self.active_connections)}")
        
        # Message de bienvenue
        welcome_msg = ChatMessage(
            type="system",
            content="üöÄ Browser-Use Web Agent connect√© ! Pr√™t √† ex√©cuter vos t√¢ches.",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Syst√®me"
        )
        await self.send_personal_message(welcome_msg.dict(), websocket)
        
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"Client d√©connect√©. Total: {len(self.active_connections)}")
        
    async def send_personal_message(self, message: dict, websocket: WebSocket):
        try:
            await websocket.send_json(message)
        except Exception as e:
            logger.error(f"Erreur envoi message: {e}")
            self.disconnect(websocket)
            
    async def broadcast(self, message: dict):
        for connection in self.active_connections.copy():
            await self.send_personal_message(message, connection)
            
    async def acquire_agent_lock(self):
        """Acquire lock for agent execution"""
        await self._lock.acquire()
        if self.agent_busy:
            self._lock.release()
            return False
        self.agent_busy = True
        return True
        
    async def release_agent_lock(self):
        """Release lock for agent execution"""
        self.agent_busy = False
        self.current_task = None
        self._lock.release()

# Instance globale
manager = ConnectionManager()

# Lifecycle management
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ D√©marrage Browser-Use Web Backend...")
    logger.info("‚úÖ Backend pr√™t !")
    yield
    # Shutdown
    logger.info("üõë Arr√™t du backend...")

# Application FastAPI
app = FastAPI(
    title="Browser-Use Web API",
    description="API moderne pour Browser-Use avec WebSocket",
    version="2.0.0",
    lifespan=lifespan
)

# Configuration CORS s√©curis√©e
allowed_origins = os.getenv('CORS_ORIGINS', 'http://localhost:3000,http://localhost:3001').split(',')
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,  # Origines configurables depuis l'environnement
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Routes API

@app.get("/")
async def root():
    """Page d'accueil de l'API"""
    return {
        "message": "üåê Browser-Use Web API",
        "version": "2.0.0",
        "status": "active",
        "frontend": "http://localhost:3000",
        "websocket": "ws://localhost:8000/ws/chat",
        "docs": "http://localhost:8000/docs"
    }

@app.get("/api/status")
async def get_status():
    """Status de l'agent"""
    return AgentStatus(
        status="busy" if manager.agent_busy else "idle",
        current_task=manager.current_task,
        uptime=datetime.now().strftime("%H:%M:%S")
    )

@app.post("/api/execute")
async def execute_task(request: TaskRequest):
    """Ex√©cuter une t√¢che Browser-Use (alternative REST)"""
    if not await manager.acquire_agent_lock():
        raise HTTPException(status_code=409, detail="Agent occup√©")
        
    try:
        manager.current_task = request.task
        
        # Broadcast d√©but de t√¢che
        start_msg = ChatMessage(
            type="system",
            content=f"üéØ D√©marrage de la t√¢che: {request.task}",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Agent"
        )
        await manager.broadcast(start_msg.dict())
        
        # Ex√©cution Browser-Use
        agent = Agent(
            task=request.task,
            llm=ChatOpenAI(model=request.model, temperature=request.temperature),
        )
        
        # Ex√©cution asynchrone
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, lambda: asyncio.run(agent.run()))
        
        # Broadcast succ√®s
        success_msg = ChatMessage(
            type="agent",
            content="‚úÖ T√¢che accomplie avec succ√®s !",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Agent"
        )
        await manager.broadcast(success_msg.dict())
        
        return {"status": "success", "message": "T√¢che ex√©cut√©e"}
        
    except Exception as e:
        error_msg = ChatMessage(
            type="error",
            content=f"‚ùå Erreur: {str(e)[:100]}...",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Syst√®me"
        )
        await manager.broadcast(error_msg.dict())
        raise HTTPException(status_code=500, detail=str(e))
        
    finally:
        await manager.release_agent_lock()

# WebSocket pour chat temps r√©el
@app.websocket("/ws/chat")
async def websocket_chat(websocket: WebSocket):
    """WebSocket pour communication temps r√©el"""
    await manager.connect(websocket)
    
    try:
        while True:
            # Recevoir message du client
            data = await websocket.receive_json()
            logger.info(f"Message re√ßu: {data}")
            
            if data.get("type") == "user_message":
                task = data.get("content", "").strip()
                
                if not task:
                    continue
                    
                # Broadcast message utilisateur
                user_msg = ChatMessage(
                    type="user",
                    content=task,
                    timestamp=datetime.now().strftime("%H:%M:%S"),
                    sender="Vous"
                )
                await manager.broadcast(user_msg.dict())
                
                # Traitement avec Browser-Use
                await process_task_websocket(task, websocket)
                
            elif data.get("type") == "voice_input":
                # Traitement vocal
                voice_text = data.get("content", "")
                voice_msg = ChatMessage(
                    type="user",
                    content=f"üé§ Vocal: ¬´ {voice_text} ¬ª",
                    timestamp=datetime.now().strftime("%H:%M:%S"),
                    sender="Vocal"
                )
                await manager.broadcast(voice_msg.dict())
                
                # Ex√©cuter si c'est une commande
                if voice_text.strip():
                    await process_task_websocket(voice_text, websocket)
                    
            elif data.get("type") == "ping":
                # Heartbeat
                await websocket.send_json({"type": "pong", "timestamp": datetime.now().isoformat()})
                
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        logger.info("Client WebSocket d√©connect√©")
    except Exception as e:
        logger.error(f"Erreur WebSocket: {e}")
        manager.disconnect(websocket)

async def process_task_websocket(task: str, websocket: WebSocket):
    """Traiter une t√¢che Browser-Use via WebSocket"""
    if manager.agent_busy:
        busy_msg = ChatMessage(
            type="system",
            content="‚è≥ Agent occup√©, veuillez patienter...",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Syst√®me"
        )
        await manager.send_personal_message(busy_msg.dict(), websocket)
        return
        
    try:
        manager.agent_busy = True
        manager.current_task = task
        
        # Message de d√©marrage
        start_msg = ChatMessage(
            type="system",
            content="üîÑ Traitement en cours...",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Agent"
        )
        await manager.broadcast(start_msg.dict())
        
        # Simulation de progression (optionnel)
        progress_messages = [
            "üß† Analyse de la demande...",
            "üéØ Planification des actions...",
            "‚ö° Ex√©cution en cours...",
            "‚ú® Finalisation..."
        ]
        
        for i, msg in enumerate(progress_messages):
            await asyncio.sleep(0.5)  # D√©lai pour l'effet visuel
            progress_msg = ChatMessage(
                type="system",
                content=msg,
                timestamp=datetime.now().strftime("%H:%M:%S"),
                sender="Agent"
            )
            await manager.broadcast(progress_msg.dict())
            
        # Ex√©cution Browser-Use
        agent = Agent(
            task=task,
            llm=ChatOpenAI(model="gpt-4o-mini", temperature=0.7),
        )
        
        # Ex√©cution dans un thread s√©par√©
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, lambda: asyncio.run(agent.run()))
        
        # Message de succ√®s
        success_msg = ChatMessage(
            type="agent",
            content="üéâ T√¢che accomplie avec succ√®s ! L'agent a termin√© toutes les actions requises.",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Agent"
        )
        await manager.broadcast(success_msg.dict())
        
    except Exception as e:
        error_msg = ChatMessage(
            type="error",
            content=f"üí• Erreur lors de l'ex√©cution: {str(e)[:80]}...",
            timestamp=datetime.now().strftime("%H:%M:%S"),
            sender="Syst√®me"
        )
        await manager.broadcast(error_msg.dict())
        logger.error(f"Erreur traitement t√¢che: {e}")
        
    finally:
        manager.agent_busy = False
        manager.current_task = None

# Route de sant√©
@app.get("/health")
async def health_check():
    """V√©rification de sant√© du service"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "connections": len(manager.active_connections),
        "agent_busy": manager.agent_busy
    }

# Point d'entr√©e principal
if __name__ == "__main__":
    logger.info("üöÄ D√©marrage du serveur Browser-Use Web Backend...")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
        access_log=True
    ) 